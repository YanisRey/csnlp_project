from datasets import load_dataset
import random
import string
import torch
from transformers import Wav2Vec2Processor, Wav2Vec2ForCTC

# Load Wikitext dataset
print("Loading Wikitext...")
dataset = load_dataset("wikitext", "wikitext-103-v1")
text_data = ' '.join(dataset['train']['text'][:10000])
words = list(set(text_data.split()))

# Filter out non-alpha, short, or non-lowercase words
valid_words = [w.lower() for w in words if w.isalpha() and len(w) > 3]
sampled_words = random.sample(valid_words, 100)

# Define vowels and consonants for typo introduction
vowels = "aeiou"
consonants = "bcdfghjklmnpqrstvwxyz"

def introduce_single_typo(word):
    idx = random.randint(0, len(word) - 1)
    char = word[idx].lower()
    if char in vowels:
        typo_char = random.choice([c for c in vowels if c != char])
    elif char in consonants:
        typo_char = random.choice([c for c in consonants if c != char])
    else:
        typo_char = random.choice([c for c in string.ascii_lowercase if c != char])
    return word[:idx] + typo_char + word[idx+1:]

# Load Wav2Vec2 for phonetic transcription
print("Loading Wav2Vec2 for phonetic transcription...")
processor = Wav2Vec2Processor.from_pretrained("./wav2vec2-lv-60k")
model = Wav2Vec2ForCTC.from_pretrained("./wav2vec2-lv-60k")

def text_to_phonemes(text):
    # Tokenize the text (treat characters as pseudo-audio)
    input_values = processor(text.lower(), return_tensors="pt", sampling_rate=16000).input_values
    with torch.no_grad():
        logits = model(input_values).logits
    predicted_ids = torch.argmax(logits, dim=-1)
    phonemes = processor.batch_decode(predicted_ids)[0]
    return phonemes


# Output file
output_path = "wav2vec2_typos_phonetics.txt"
with open(output_path, "w", encoding="utf-8") as f:
    for word in sampled_words:
        typo = introduce_single_typo(word)
        try:
            phoneme_str = text_to_phonemes(typo)
        except Exception as e:
            phoneme_str = f"ERROR: {str(e)}"
        line = f"{word} -> {typo} -> {phoneme_str}"
        print(line)
        f.write(line + "\n")

print(f"\nâœ… Done. Output saved to '{output_path}'")